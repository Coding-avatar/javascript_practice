// Generated by CodiumAI
const bubbleSort = require('./bubbleSort')
describe('bubbleSort', () => {

    // sorts an array of positive integers in ascending order
    it('should sort an array of positive integers in ascending order', () => {
        const input = [5, 3, 8, 4, 2];
        const expectedOutput = [2, 3, 4, 5, 8];
        expect(bubbleSort(input)).toEqual(expectedOutput);
    });

    // sorts an empty array
    it('should return an empty array when input is an empty array', () => {
        const input = [];
        const expectedOutput = [];
        expect(bubbleSort(input)).toEqual(expectedOutput);
    });

    // sorts an array of negative integers in ascending order
    it('should sort an array of negative integers in ascending order', () => {
        const input = [-5, -3, -8, -4, -2];
        const expectedOutput = [-8, -5, -4, -3, -2];
        expect(bubbleSort(input)).toEqual(expectedOutput);
    });

    // sorts an array with both positive and negative integers
    it('should sort an array with both positive and negative integers', () => {
        const input = [5, -3, 8, -4, 2];
        const expectedOutput = [-4, -3, 2, 5, 8];
        expect(bubbleSort(input)).toEqual(expectedOutput);
    });

    // sorts an array with duplicate elements
    it('should sort an array with duplicate elements when calling bubbleSort function', () => {
        const input = [5, 3, 8, 4, 2, 3, 8];
        const expectedOutput = [2, 3, 3, 4, 5, 8, 8];
        expect(bubbleSort(input)).toEqual(expectedOutput);
    });

    // returns an already sorted array unchanged
    it('should return an already sorted array unchanged', () => {
        const input = [1, 2, 3, 4, 5];
        const expectedOutput = [1, 2, 3, 4, 5];
        expect(bubbleSort(input)).toEqual(expectedOutput);
    });

    // sorts an array with all elements being the same
    it('should sort an array with all elements being the same', () => {
        const input = [5, 5, 5, 5, 5];
        const expectedOutput = [5, 5, 5, 5, 5];
        expect(bubbleSort(input)).toEqual(expectedOutput);
    });

    // sorts an array with a mix of integers and floating point numbers
    it('should sort an array with a mix of integers and floating point numbers', () => {
        const input = [5, 3.5, 8, 4.2, 2];
        const expectedOutput = [2, 3.5, 4.2, 5, 8];
        expect(bubbleSort(input)).toEqual(expectedOutput);
    });

    // sorts an array of length two
    it('should sort an array of length two', () => {
        const input = [5, 3];
        const expectedOutput = [3, 5];
        expect(bubbleSort(input)).toEqual(expectedOutput);
    });
});
