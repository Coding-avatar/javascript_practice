// Generated by CodiumAI
const linearSearch = require('./linearSearch')
describe('linearSearch', () => {

    // returns correct index when search term is present in the array
    it('should return correct index when search term is present in the array', () => {
        const arr = [1, 2, 3, 4, 5];
        const searchTerm = 3;
        const result = linearSearch(arr, searchTerm);
        expect(result).toBe(2);
    });

    // returns -1 for an empty array
    it('should return -1 for an empty array', () => {
        const arr = [];
        const searchTerm = 3;
        const result = linearSearch(arr, searchTerm);
        expect(result).toBe(-1);
    });

    // returns -1 when search term is not present in the array
    it('should return -1 when search term is not present in the array', () => {
        const arr = [1, 2, 3, 4, 5];
        const searchTerm = 6;
        const result = linearSearch(arr, searchTerm);
        expect(result).toBe(-1);
    });

    // handles arrays with duplicate elements correctly, returning the first occurrence
    it('should return correct index when search term is present in the array with duplicate elements', () => {
        const arr = [1, 2, 3, 4, 3, 5];
        const searchTerm = 3;
        const result = linearSearch(arr, searchTerm);
        expect(result).toBe(2);
    });

    // works with both positive and negative numbers
    it('should return correct index when search term is present in the array', () => {
        const arr = [1, -2, 3, -4, 5];
        const searchTerm = -4;
        const result = linearSearch(arr, searchTerm);
        expect(result).toBe(3);
    });

    // works correctly with arrays of different lengths
    it('should return -1 when array is empty', () => {
        const arr = [];
        const searchTerm = 5;
        const result = linearSearch(arr, searchTerm);
        expect(result).toBe(-1);
    });
});
