// Generated by CodiumAI
const flattenArray = require('./flattenArray')
describe('flattenArray', () => {

    // flattening a simple nested array with two levels
    it('should return a single-level array when given a nested array with two levels', () => {
        const input = [1, [2, 3], [4, [5, 6]]];
        const expectedOutput = [1, 2, 3, 4, 5, 6];
        expect(flattenArray(input)).toEqual(expectedOutput);
    });

    // flattening an empty array
    it('should return an empty array when given an empty array', () => {
        const input = [];
        const expectedOutput = [];
        expect(flattenArray(input)).toEqual(expectedOutput);
    });

    // flattening an array with multiple nested arrays at different levels
    it('should flatten an array with multiple nested arrays at different levels', () => {
        const input = [1, [2, [3, 4]], [5, [6, [7, 8]]]];
        const expectedOutput = [1, 2, 3, 4, 5, 6, 7, 8];
        expect(flattenArray(input)).toEqual(expectedOutput);
    });

    // flattening an array with no nested arrays
    it('should return the same array when given a single-level array', () => {
        const input = [1, 2, 3, 4];
        const expectedOutput = [1, 2, 3, 4];
        expect(flattenArray(input)).toEqual(expectedOutput);
    });

    // flattening an array with mixed data types (numbers, strings, objects)
    it('should flatten an array with mixed data types', () => {
        const input = [1, 'hello', [2, { key: 'value' }], [4, [5, 'world']]];
        const expectedOutput = [1, 'hello', 2, { key: 'value' }, 4, 5, 'world'];
        expect(flattenArray(input)).toEqual(expectedOutput);
    });

    // flattening an array with empty nested arrays
    it('should return an empty array when given an array with empty nested arrays', () => {
        const input = [1, [], [2, [], 3], []];
        const expectedOutput = [1, 2, 3];
        expect(flattenArray(input)).toEqual(expectedOutput);
    });

    // ensuring immutability of the original array
    it('should not modify the original nested array when flattening', () => {
        const input = [1, [2, 3], [4, [5, 6]]];
        const originalInput = JSON.parse(JSON.stringify(input));
        flattenArray(input);
        expect(input).toEqual(originalInput);
    });

    // preserving the order of elements in the flattened array
    it('should preserve the order of elements in the flattened array', () => {
        const input = [[1, 2], [3, 4], [5, 6]];
        const expectedOutput = [1, 2, 3, 4, 5, 6];
        expect(flattenArray(input)).toEqual(expectedOutput);
    });
});
