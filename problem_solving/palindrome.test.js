// Generated by CodiumAI
const isPalindrome = require('./palindrome')
describe('isPalindrome', () => {

    // correctly identifies a simple palindrome with only letters
    it('should return true when input is a simple palindrome with only letters', () => {
        const input = 'madam';
        const result = isPalindrome(input);
        expect(result).toBe(true);
    });

    // handles empty string input
    it('should return true when input is an empty string', () => {
        const input = '';
        const result = isPalindrome(input);
        expect(result).toBe(true);
    });

    // correctly handles mixed case palindromes
    it('should return true when input is a mixed case palindrome', () => {
        const input = 'A man, a plan, a canal, Panama';
        const result = isPalindrome(input);
        expect(result).toBe(true);
    });

    // handles input with only special characters
    it('should return true when input is a palindrome with only special characters', () => {
        const input = '!@#$%^&*()_)(*&^%$#@!';
        const result = isPalindrome(input);
        expect(result).toBe(true);
    });

    // handles single character input
    it('should return true when input is a single character', () => {
        const input = 'a';
        const result = isPalindrome(input);
        expect(result).toBe(true);
    });

    // handles input with spaces and punctuation
    it('should return true when input is a palindrome with spaces and punctuation', () => {
        const input = 'A man, a plan, a canal, Panama';
        const result = isPalindrome(input);
        expect(result).toBe(true);
    });

    // handles strings with unicode characters
    it('should return true when input contains unicode characters and is a palindrome', () => {
        const input = 'A man, a plan, a canal, Panama!'; // contains unicode characters
        const result = isPalindrome(input);
        expect(result).toBe(true);
    });

    // correctly handles mixed case non-palindromes
    it('should return false when input is a mixed case non-palindrome', () => {
        const input = 'HelloWorld';
        const result = isPalindrome(input);
        expect(result).toBe(false);
    });

    // correctly identifies a non-palindrome with letters and numbers
    it('should return false when input is a non-palindrome with letters and numbers', () => {
        const input = 'hello123';
        const result = isPalindrome(input);
        expect(result).toBe(false);
    });

    // correctly identifies a non-palindrome with only letters
    it('should return false when input is a non-palindrome with only letters', () => {
        const input = 'hello';
        const result = isPalindrome(input);
        expect(result).toBe(false);
    });

    // correctly identifies a simple palindrome with letters and numbers
    it('should return true when input is a simple palindrome with letters and numbers', () => {
        const input = 'A man, a plan, a canal, Panama!';
        const result = isPalindrome(input);
        expect(result).toBe(true);
    });

    // ignores non-alphanumeric characters in the input
    it('should ignore non-alphanumeric characters when checking for palindrome', () => {
        const input = 'A man, a plan, a canal, Panama!';
        const result = isPalindrome(input);
        expect(result).toBe(true);
    });

    // correctly processes strings with leading and trailing spaces
    it('should return true when input has leading and trailing spaces', () => {
        const input = '  racecar  ';
        const result = isPalindrome(input);
        expect(result).toBe(true);
    });

    // handles strings with internal spaces correctly
    it('should return true when input has internal spaces and is a palindrome', () => {
        const input = 'A man a plan a canal Panama';
        const result = isPalindrome(input);
        expect(result).toBe(true);
    });
});
