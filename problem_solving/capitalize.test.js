// Generated by CodiumAI
const capitalize = require('./capitalize')
describe('capitalize', () => {

    // converts single word to capitalized form
    it('should convert single word to capitalized form', () => {
        const input = 'hello';
        const expectedOutput = 'Hello';
        expect(capitalize(input)).toBe(expectedOutput);
    });

    // handles empty string input
    it('should return empty string when input is empty', () => {
        const input = '';
        const expectedOutput = '';
        expect(capitalize(input)).toBe(expectedOutput);
    });

    // converts multiple words to capitalized form
    it('should convert multiple words to capitalized form', () => {
        const input = 'hello world';
        const expectedOutput = 'Hello World';
        expect(capitalize(input)).toBe(expectedOutput);
    });

    // handles strings with mixed case letters
    it('should convert mixed case letters to capitalized form', () => {
        const input = 'hElLo WoRlD';
        const expectedOutput = 'Hello World';
        expect(capitalize(input)).toBe(expectedOutput);
    });

    // handles strings with leading and trailing spaces
    it('should handle strings with leading and trailing spaces', () => {
        const input = '  hello world  ';
        const expectedOutput = 'Hello World';
        expect(capitalize(input)).toBe(expectedOutput);
    });

    // handles string with only spaces
    it('should return an empty string when input has only spaces', () => {
        const input = '     ';
        const expectedOutput = '';
        expect(capitalize(input)).toBe(expectedOutput);
    });

    // handles string with numbers
    it('should convert string with numbers to capitalized form', () => {
        const input = 'hello 123 world';
        const expectedOutput = 'Hello 123 World';
        expect(capitalize(input)).toBe(expectedOutput);
    });

    // handles string with non-ASCII characters
    it('should handle non-ASCII characters when converting to capitalized form', () => {
        const input = 'héllø wørld';
        const expectedOutput = 'Héllø Wørld';
        expect(capitalize(input)).toBe(expectedOutput);
    });

    // maintains original spacing between words
    it('should maintain original spacing between words', () => {
        const input = 'hello   world';
        const expectedOutput = 'Hello   World';
        expect(capitalize(input)).toBe(expectedOutput);
    });

    // handles very long strings efficiently
    it('should handle very long strings efficiently', () => {
        const input = 'this is a very long string with multiple words that needs to be capitalized';
        const expectedOutput = 'This Is A Very Long String With Multiple Words That Needs To Be Capitalized';
        expect(capitalize(input)).toBe(expectedOutput);
    });

    // does not alter non-alphabetic characters
    it('should not alter non-alphabetic characters when present in the input string', () => {
        const input = 'Hello, World!';
        const expectedOutput = 'Hello, World!';
        expect(capitalize(input)).toBe(expectedOutput);
    });

    // ensures no trailing space in the result
    it('should ensure no trailing space in the result', () => {
        const input = 'hello world';
        const expectedOutput = 'Hello World';
        expect(capitalize(input)).toBe(expectedOutput);
    });
});
